caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
data <- load_pbp(2020)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
qbs <- qbs %>%
left_join(teams_colors_logos, by = c('team' = 'team_abbr'))
qbs %>%
ggplot(aes(x = cpoe, y = epa)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(qbs$epa), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(qbs$cpoe), color = "red", linetype = "dashed", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = qbs$team_color, cex=qbs$n_plays / 10, alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=name)) +
#add a smooth line fitting cpoe + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
#titles and caption
labs(x = "Completion % above expected (CPOE)",
y = "Total EPA",
title = "Quarterback Production",
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
qbs %>%
ggplot(aes(x = cpoe, y = epa)) +
#horizontal line with mean EPA
geom_hline(yintercept = mean(qbs$epa), color = "red", linetype = "dashed", alpha=0.5) +
#vertical line with mean CPOE
geom_vline(xintercept =  mean(qbs$cpoe), color = "red", linetype = "dashed", alpha=0.5) +
#add points for the QBs with the right colors
#cex controls point size and alpha the transparency (alpha = 1 is normal)
geom_point(color = qbs$team_color, cex=qbs$n_plays / 300, alpha = .6) +
#add names using ggrepel, which tries to make them not overlap
geom_text_repel(aes(label=name)) +
#add a smooth line fitting cpoe + epa
stat_smooth(geom='line', alpha=0.5, se=FALSE, method='lm')+
#titles and caption
labs(x = "Completion % above expected (CPOE)",
y = "Total EPA",
title = "Quarterback Production",
caption = "Data: @nflfastR") +
#uses the black and white ggplot theme
theme_bw() +
#center title with hjust = 0.5
theme(
plot.title = element_text(size = 14, hjust = 0.5, face = "bold")
) +
#make ticks look nice
#if this doesn't work, `install.packages('scales')`
scale_y_continuous(breaks = scales::pretty_breaks(n = 10)) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))
data <- load_pbp(2019)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
qbs <- qbs %>%
left_join(teams_colors_logos, by = c('team' = 'team_abbr'))
data <- load_pbp(2018)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
qbs <- qbs %>%
left_join(teams_colors_logos, by = c('team' = 'team_abbr'))
data <- load_pbp(2017)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
data <- load_pbp(2016)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
data <- load_pbp(2015)
qbs<-data %>%
filter(season_type == "REG", !is.na(epa)) %>%
group_by(id, name) %>%
summarize(
epa = sum(qb_epa),
cpoe = mean(cpoe, na.rm = T),
n_dropbacks = sum(pass),
n_plays = n(),
team = last(posteam)
) %>%
ungroup() %>%
filter(n_dropbacks > 10 & n_plays > 10) %>%
arrange(desc(epa))
library(tidyverse)
library(ggrepel)
#library(ggimage)
library(nflfastR)
library(ggplot2)
seasons <- 2021
data <- purrr::map_df(seasons, function(x) {
readRDS(
url(
glue::glue("https://raw.githubusercontent.com/guga31bb/nflfastR-data/master/data/play_by_play_{x}.rds")
)
)
})
epa_by_game = data %>%
filter(
season_type == 'REG',
play_type %in% c('pass','run'),
!is.na(epa)
)%>%
group_by(
posteam,defteam
) %>% summarise(
epa = mean(epa),
gameid = unique(game_id)
) %>% ungroup() %>% mutate(def_epa = epa) %>% arrange(
gameid
)
model_defense = epa_by_game %>% lm(
formula = def_epa ~ as.factor(posteam))
epa_by_game$predicted_def_epa = predict(model_defense)
epa_by_game$adjusted_def_epa = epa_by_game$def_epa - epa_by_game$predicted_def_epa
model_offense = epa_by_game %>% lm(
formula = epa ~ as.factor(defteam))
epa_by_game$predicted_epa = predict(model_offense)
epa_by_game$adjusted_epa = epa_by_game$epa - epa_by_game$predicted_epa
by_team_off = epa_by_game %>% group_by(posteam) %>% summarise(
adjusted_epa = mean(adjusted_epa),
epa = mean(epa)) %>% rename(team = posteam)
by_team_def = epa_by_game %>% group_by(defteam) %>% summarise(adjusted_def_epa = mean(adjusted_def_epa))%>% rename(team = defteam)
by_team = base::merge(by_team_def,by_team_off, by = 'team')
by_team= merge(by_team,nflfastR::teams_colors_logos, by.x = "team", by.y = "team_abbr")
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw()
ggsave(dpi = 400, filename = 'plot.png',  width = 7,height = 7)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/Play',
x = 'EPA/Play'
)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
Title = 'NFL Team Tiers, 2021 (Defense Adjusted for Opponent)'
)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021 (Defense Adjusted for Opponent)'
)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021 (defensive efficiency adjusted for opponent)'
) + theme(
plot.title = element_text(hjust = 0.5)
)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021',
subtitle =  'Defensive Efficiency Opponent-adjusted'
) + theme(
plot.title = element_text(hjust = 0.5)
)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021',
subtitle =  'Defensive Efficiency Opponent-adjusted'
) + theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021',
subtitle =  'Defensive efficiency is adjusted by opponent'
) + theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
epa_by_game %>% lm(
formula = def_epa ~ as.factor(posteam)) %>% predict()
epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>% lm(
formula = def_epa ~ as.factor(posteam)) %>% predict()
)
epa_by_game = data %>%
filter(
season_type == 'REG',
play_type %in% c('pass','run'),
!is.na(epa)
)%>%
group_by(
posteam,defteam
) %>% summarise(
epa = mean(epa),
gameid = unique(game_id)
) %>% ungroup() %>% mutate(def_epa = epa)
epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>% lm(
formula = def_epa ~ as.factor(posteam)) %>% predict()
)
epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>%
lm(formula = def_epa ~ as.factor(posteam)) %>%
predict(),
adjusted_def_epa = def_epa - epa_by_game
)
epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>%
lm(formula = def_epa ~ as.factor(posteam)) %>%
predict(),
adjusted_def_epa = def_epa - predicted_def_epa
)
epa_by_game = epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>%
lm(formula = def_epa ~ as.factor(posteam)) %>%
predict(),
adjusted_def_epa = def_epa - predicted_def_epa
)
View(epa_by_game)
epa_by_game = data %>%
filter(
season_type == 'REG',
play_type %in% c('pass','run'),
!is.na(epa)
)%>%
group_by(
game_id,posteam,defteam
) %>% summarise(
epa = mean(epa)
) %>% ungroup() %>% mutate(def_epa = epa)
View(epa_by_game)
epa_by_game = epa_by_game %>% mutate(
predicted_def_epa = epa_by_game %>%
lm(formula = def_epa ~ as.factor(posteam)) %>%
predict(),
adjusted_def_epa = def_epa - predicted_def_epa
)
View(epa_by_game)
by_offense = epa_by_game %>%
group_by(posteam) %>%
summarise(
epa = mean(epa)) %>%
rename(team = posteam)
by_offense
team = merge(defense,offense, by = 'team')
offense = epa_by_game %>%
group_by(posteam) %>%
summarise(
epa = mean(epa)) %>%
rename(team = posteam)
defense = epa_by_game %>%
group_by(defteam) %>%
summarise(
adjusted_def_epa = mean(adjusted_def_epa)) %>%
rename(team = defteam)
team = merge(defense,offense, by = 'team')
team
nflfastR::teams_colors_logos
team= merge(by_team,nflfastR::teams_colors_logos, by.x = "team", by.y = "team_abbr")
by_team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3),
alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021',
subtitle =  'Defensive efficiency is adjusted by opponent'
) + theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
team = merge(defense,offense, by = 'team')
team = merge(team,nflfastR::teams_colors_logos, by.x = "team", by.y = "team_abbr")
team %>% ggplot(aes(y= adjusted_def_epa,x=epa)) +
geom_hline(yintercept = mean(by_team$adjusted_def_epa), color = "red", linetype = "dashed") +
geom_vline(xintercept =  mean(by_team$epa), color = "red", linetype = "dashed")+
ggimage::geom_image(aes(image = team_logo_espn), size = 0.06)  +
geom_abline(slope = -1, intercept = c(-.3,-.15,0,.15,.3), alpha = .2) +
scale_y_reverse() +
ggplot2::theme_bw() +
labs(
y = 'Adjusted Defensive EPA/play',
x = 'EPA/play',
title = 'NFL Team Tiers, 2021',
subtitle =  'Defensive efficiency is adjusted by opponent'
) + theme(
plot.title = element_text(hjust = 0.5),plot.subtitle = element_text(hjust = 0.5)
); ggsave(dpi = 400, filename = 'plot.png',  width = 8,height = 5)
library(tidyverse)
library(nflfastR)
library(caret)
library(boot)
setwd("~/GitHub/PowerRankNFL")
#Load data
maindata <- plyr::ldply(list.files('PowerRankingModeling/OutputData/DataForModeling',full.names = T), read.csv, header=TRUE)
#Functions
effect <- function(data, indices,t) {
d <- data[indices,]
cols = c('WEPADiff', 'opponent','team')
dummies_ <- caret::dummyVars(WEPADiff ~ ., data = d[,cols])
dummies = predict(dummies_, newdata = d[,cols])
x = as.matrix(dummies)
model = glmnet::glmnet(x, d$WEPADiff, alpha = 0, family = 'gaussian', lambda = .001)
stat = data.frame('Team' = rownames(model$beta),
'Coef' = as.vector(model$beta)) %>%
filter(grepl('team', Team))  %>%
mutate(
Team = stringr::str_remove(Team, 'team'),
)  %>%  filter(Team == t) %>% pull(Coef)
return(stat)
}
create_CI = function(vector,CI){
lower = (1 - CI) / 2
upper = 1- lower
ci = quantile(vector, c(lower,upper))
return(ci)
}
for (szn in 2020:2021){
#Filter for season
seas = dplyr::filter(maindata, season == szn)
for (wk in 3:6){
#Filter for week
df = maindata %>% filter(season==szn,week==wk)
df = rbind(df,df)
#Run bootstrap
lst = list()
for (team in unique(df$team)){
try_again = TRUE
while (try_again == TRUE){
results <- try(boot(data=df, statistic=effect,
R=300, t=team), silent=TRUE)
if ('try-error' %in% class(results)){
print(paste(team,'Error: trying again'))
try_again = TRUE
}
else{
print(paste(team,'Model converged'))
try_again = FALSE
}
}
#Get results
df_out = data.frame('AdjWEPADiff' = results$t,'Team' = team,'Season'=szn, 'LatestWeek' = wk)
rm(results)
#Save to list
lst[[team]] = df_out
rm(df_out)
}
rm(df)
#Prepare results
dataframe = dplyr::bind_rows(lst)
#Summarize by team
summary = dataframe %>% group_by(
Team
) %>% summarise(
LowerCI95 = create_CI(AdjWEPADiff,.95)[1],
UpperCI95 =create_CI(AdjWEPADiff,.95)[2],
LowerCI85 = create_CI(AdjWEPADiff,.85)[1],
UpperCI85 =create_CI(AdjWEPADiff,.85)[2],
AdjWEPADiff  = mean(AdjWEPADiff),
Season = unique(Season),
LatestWeek = unique(LatestWeek)
)
#Save files
file_name = paste0(as.character(szn),'_',as.character(wk),'.csv')
write.csv(dataframe,paste0('PowerRankingModeling/OutputData/BootstrappedEstimates/',file_name),row.names = F)
write.csv(summary,paste0('PowerRankingModeling/OutputData/SummaryResults/',file_name),row.names = F)
}
}
